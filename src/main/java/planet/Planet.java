package planet;

import planet.exception.MissingTileTypeException;
import planet.tiles.Observer;
import planet.tiles.Tile;
import planet.tiles.TileType;

public class Planet implements Observer {

    private Tile[][] map;
    private final int SIZE_X = 21;
    private final int SIZE_Y = 21;
    private final int[][] squeleton = {
            {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
            {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
            {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
            {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0},
            {0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
            {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0},
            {0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0},
            {0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
            {0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1},
            {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
            {1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
            {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1}
    };

    private final int[][] initialState = {
            {0, 0, 0, 0, 8, 10, 5, 5, 5, 5, 5, 5, 10, 8, 8, 8, 10, 8, 8, 2, 3},
            {0, 0, 8, 8, 8, 10, 5, 5, 5, 5, 8, 10, 10, 10, 8, 10, 8, 8, 6, 3, 3},
            {0, 8, 10, 10, 10, 8, 5, 5, 5, 8, 10, 10, 10, 10, 10, 10, 10, 9, 3, 0, 3},
            {0, 3, 10, 10, 8, 8, 5, 5, 7, 8, 10, 0, 10, 10, 10, 10, 10, 9, 3, 3, 6},
            {8, 3, 3, 3, 8, 8, 8, 5, 8, 8, 10, 0, 0, 10, 6, 9, 9, 9, 0, 0, 0},
            {8, 8, 10, 3, 3, 3, 10, 8, 8, 8, 10, 10, 10, 6, 10, 9, 7, 0, 0, 0, 9},
            {10, 8, 3, 3, 3, 2, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 0, 0, 0, 9, 10},
            {8, 8, 3, 2, 3, 3, 3, 3, 9, 10, 10, 10, 10, 10, 10, 10, 3, 0, 9, 10, 10},
            {10, 8, 8, 8, 8, 3, 3, 3, 10, 8, 9, 8, 9, 9, 3, 3, 10, 6, 10, 9, 9},
            {8, 10, 8, 8, 8, 8, 8, 3, 10, 10, 3, 10, 10, 3, 3, 10, 10, 10, 10, 9, 9},
            {4, 8, 10, 8, 8, 8, 7, 3, 3, 10, 0, 3, 3, 10, 10, 8, 8, 10, 9, 0, 0},
            {4, 10, 10, 8, 10, 10, 8, 8, 3, 0, 3, 3, 9, 10, 10, 9, 0, 9, 0, 0, 9},
            {4, 10, 8, 0, 8, 8, 10, 8, 10, 10, 3, 3, 9, 9, 6, 0, 9, 9, 0, 4, 4},
            {4, 10, 10, 9, 6, 0, 10, 10, 10, 6, 3, 10, 3, 9, 9, 6, 4, 4, 4, 4, 4},
            {10, 10, 10, 6, 6, 0, 10, 10, 10, 10, 10, 2, 3, 9, 8, 4, 4, 4, 4, 4, 10},
            {10, 6, 6, 10, 0, 0, 10, 7, 10, 10, 10, 3, 3, 8, 9, 4, 4, 10, 4, 10, 9},
            {8, 8, 10, 10, 8, 8, 10, 10, 3, 3, 3, 3, 3, 3, 9, 10, 10, 10, 6, 8, 8},
            {9, 9, 9, 9, 9, 3, 3, 3, 3, 3, 10, 9, 9, 3, 3, 3, 8, 10, 9, 9, 0},
            {10, 9, 3, 3, 3, 3, 3, 10, 9, 10, 10, 10, 10, 10, 10, 3, 3, 3, 0, 0, 0},
            {0, 3, 3, 0, 0, 10, 10, 10, 0, 0, 9, 10, 10, 10, 10, 10, 2, 3, 3, 0, 0},
            {3, 3, 0, 10, 7, 6, 10, 9, 8, 8, 10, 10, 10, 10, 10, 10, 8, 0, 0, 0, 0}
    };

    public void intialize() throws MissingTileTypeException {
        map = new Tile[21][21];
        for (int y = 0; y < SIZE_X; y++) {
            for (int x = 0; x < SIZE_Y; x++) {
                TileType type = TileType.getType(initialState[y][x]);
                map[y][x] = new Tile(x, y, 10, 10, type);
            }
        }

        afficheDebug();
    }

    public Tile[][] getRecentChanges() {
        return this.map;
    }

    public void update() {

    }

    private void afficheDebug() {
        for (int y = 0; y < SIZE_X; y++) {
            for (int x = 0; x < SIZE_Y; x++) {
                //"'%15s' %n", "baeldung"
                System.out.printf("'%14s' ", map[y][x].getType());
            }
            System.out.println();
        }
    }
}
